# Specific to azure cloud_provider
cloud_provider="azure"
arm_subscription_id="yourazuresubscriptionid"
arm_client_id="yourazureclientid"
arm_client_secret="yourazureclientsecret"
resource_group_name="azure-k8s"
network_plugin="azure"
network_policy="calico"
service_cidr="172.100.0.0/24"
dns_service_ip="172.100.0.10"
docker_bridge_cidr="172.101.0.1/16"
load_balancer_sku="Standard"
linux_profile_admin_username="ubuntu"
enable_kube_dashboard="true"
operator="DevOps"
node_disk_size="40"
environment="Devlab"
dns_prefix="k8s"
enable_auto_scaling="true"
agent_count="1"
autoscale_min_count="1"
autoscale_max_count="3"
default_node_pool_name="agentpool"
default_node_pool_vm_size="Standard_B4ms"
cluster_name="k8s"
kubernetes_version="1.17.3"
location="East US"

# Set up k8s components

# Handles auto issuance of ssl certificates. See: https://cert-manager.io/
# Note for publicly exposed services set certmanager_solver type to either "HTTP01" or "DNS01"
# Note: For internal only dns records you will need to use certmanager_solver type of "DNS01"
# Valid options are: cloudflare, none
certmanager_provider="none"
# Email to send renewal ssl notices to
certmanager_email=""
certmanager_helm_chart_version="0.15.0"
# Valid options are: "HTTP01", "DNS01"
certmanager_solver="HTTP01"

# See: https://kubernetes.github.io/ingress-nginx/
# Valid options are: nginx, none
ingress_provider="nginx"
ingress_helm_chart_version="2.1.0"

# Adds External Dns Controller Support that will handle updating of ingress and service records that are annotated
# See https://github.com/kubernetes-sigs/external-dns
# Valid options are: cloudflare, none
externaldns_provider="none"
externaldns_helm_chart_version="2.22.1"
# Domains that you wish to issue certs and create external dns records for
externaldns_domains=""
# When using API Token authentication the cloudflare token should be granted Zone Read and DNS Edit privileges.
externaldns_api_token=""

# Controls the installing of the rook operator via helm
# Rook allows you to utilize ceph and cephfs to create high availability redundant storage.
# See: https://rook.io/docs/rook/v1.3/helm-operator.html
rook_enabled="false"
rook_helm_chart_version="v1.3.3"
# Role Base Access Permission
rbac_enabled="true"

# Controls enabling/disabling of nfs via helm chart
# See: https://github.com/helm/charts/tree/master/stable/nfs-server-provisioner
nfs_server_enabled="false"
nfs_chart_version="1.0.0"
nfs_storage_class=""
nfs_persistence_enabled="enabled"
nfs_disk_size="50Gi"

# Controls enabling/disabling of prometheus via helm chart
# See: https://hub.helm.sh/charts/stable/prometheus
prometheus_enabled="false"
prometheus_chart_version="11.2.3"